'''
Published by Dennis Lima and collaborators in 2024.
Availed on GitHub in 2025.
Cite ... to attribute the author for using or extending functions within this file.

Copy, paste and run lines below for usage examples.
#---------------------------------

#-------------------
# USAGE EXAMPLE 1 - sympy 
#-------------------
import sympy as sy

s = sy.symbols('a b c d e f g h i')
s = sy.reshape(s, [3,])
s = np.array(s)
s
V = pinv(s, (1,2), (2,2), (2,2), (1,2) )
sy.simplify(V)

#-------------------
# USAGE EXAMPLE 2 - numpy 
#-------------------
import numpy as np

M  = np.random.rand(5,5)
M2 = pinv(M, (1,2), (2,2), (2,2), (1,2)  )

# Result must be zero.
np.round( M2 - M, 6)


#-------------------
# USAGE EXAMPLE 3 - Eq. 44 from original paper 
#-------------------
import numpy as np

M  = np.random.rand(2, 2)
M2 = pinv(M, (1,0), (0,0), (0,1), (0,0), (1,1))
X  = np.array([[0,1],[1,0]])

# Result must be zero.
np.round( (M @ X ) - M2, 6)

#-------------------
# USAGE EXAMPLE 4 - Fig. 3 from original paper 
#-------------------
import numpy as np

# S can be any unitary matrix.
S = np.sqrt(2) * np.array([[1,1],[-1,1]])
T = pinv(S, (1,1))
A = pinv(T, (1,0))

# Left-hand side of equation
T42   = pinv( A @ A @ A, (1,0) )
T44_l = T42 @ T42 @ T42

# Right-hand side of equation
A24 = pinv( T @ T @ T,       (1,0) )
T44_r = pinv( A24 @ A24 @ A24, (1,0) )

# Result must be zero.
np.round( T44_l - T44_r,  6)


#-------------------
# USAGE EXAMPLE 5 - kha-guna polynomials 
#-------------------
import sympy as sy

# Defining kha-guna as a variable that represents zero
o        = sy.symbols('o') 

# Defining the Pauli matrix X with kha-gunas in place of zeros
Xkh     = np.array([[o,1],[1,o]])
Xkh_inv = pinv(Xkh, (0,0), (1,1))  # Full matrix inversion

# See before simplification
Xkh_inv

# See after simplification
Xkh_inv_ = sy.simplify(Xkh_inv)
Xkh_inv_

# See after substitution of kha-guna by zero (realization)
Xkh_inv_rep = Xkh_inv_.replace(o, 0)
Xkh_inv_rep

# (!) Attention: sympy.simplify is not equipped... 
# for the manipulation of arbitrary kha-guna   ...
# polynomials. So some simplifications using   ...
# sympy.simplify may fail.

#---------------------------------------------------------
'''

import numpy as np

def pinv(M, *args):
    ''' 
    M: numpy array of floats or sympy symbols.
    args: tuple of matrix indices. E.g.: (0,0), (1,2).
    '''
    Z = M.copy()
    for idx in args:
        i, k = idx
        new = []
        for r in range(Z.shape[0]):
            newrow = []
            for s in range(Z.shape[1]):
                Z_ = Z[i,k]**-1
                if s == k:                
                    if r == i:
                        newrow.append( Z_ )
                    else:
                        newrow.append(  Z[r,k]*Z_ )
                else:
                    if r == i:
                        newrow.append(  -Z_*Z[i,s] )
                    else:
                        newrow.append(  Z[r,s] - Z[r,k] * Z_ * Z[i,s] )
            new.append( newrow )
        Z = np.array(new).copy()
    #
    return np.array(new)

